#!/bin/bash

set -e

readonly __TRUE_RETURN=0
readonly __FALSE_RETURN=1

main () {
  if [[ -z $1 ]]; then
    show_help
    exit 0
  fi

  for arg in $@; do
    case $arg in
      clean)    [[ -d ./build ]] && clean
                ;;

      run)      shift
                [[ -d ./build ]] || init
                run $@
                exit 0
                ;;

      init)     clean
                init
                ;;

      format)   format
                ;;

      search)   shift
                ag --ignore-dir=lib --ignore-dir=build $@
                exit 0
                ;;

      *)        show_help
                exit 0
                ;;
    esac
  done;
  exit 0
}

format ()  {
  local cfmt_opts=("-i" "-style=file")

  find ./src/ -name "*.cc" -o -name "*.hh" -print0 | xargs -0 clang-format "$cfmt_opts"     &
  find ./include/ -name "*.cc" -o -name "*.hh" -print0 | xargs -0 clang-format "$cfmt_opts" &
  find ./tests/ -name "*.cc" -o -name "*.hh" -print0 | xargs -0 clang-format "$cfmt_opts"   &

  wait
}

clean () {
  echo "clealing build/"
  rm -rf ./build
}

run () {
  [[ -z $1 ]] && (echo "Usage: ./run run <bin_name>"; exit 1)

  local bin=$1

  echo "running $bin"
  make -j9 -C ./build && ./build/tests/$bin
}

init () {
  echo "initializing build"
  mkdir -p ./build

  pushd . >/dev/null
  cd ./build
  cmake -Dtest=ON -DCMAKE_BUILD_TYPE=Debug ..
  popd >/dev/null
}

show_help () {
  cat <<EOF
  Usage:
    $ ./run <arg> [opt]

  Arguments:
    run     builds and runs test_window assuming that the proper
            Makesfiles have been generated previously

    init    prepares Makefiles from CMake in "./build"

    clean   cleans the 'build repo'

    format  formats sources and headers

    search  searches for a given string in all the project except
            for "build" and "lib" directories

EOF
}

main "$@"
